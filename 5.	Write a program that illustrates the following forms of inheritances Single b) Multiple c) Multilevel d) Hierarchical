*SINGLE INHERITANCE:

//single inheritance 
#include<iostream>
using namespace std;
class base{
	public: void display(){
		cout<<"base class function";
	}	
	};
	class derived: public base
	{
	public: void input()
	{
		cout<<"derived class function";
	}
};
    int main ()
    {
    	derived d;
    	d.display();
    	d.input();}


*MULTIPLE INHERITANCE:	


//multiple inheritance 
#include<iostream>
using namespace std;
class base{
	public: void display()
	{
		cout<<"base class function";
	}
	};
	class derived: public base
	{
	public: void input()
	{
		cout<<"derived class level1 function";
	}
};
class derived1:public derived{	
	public:void enter ()
	{
		cout<<"derived class level2 function";
	}
};
int main()
{
   derived d1;
   d1.display();
   cout<<endl;
   d1.input();
}



*MULTILEVEL INHERITANCE:


//multilevel inheritance
#include<iostream>
using namespace std;
class demo{
	public :int a;
};
class demo1
{
	public: int b;
};
class mul:public demo,public demo1
{
	int c;
public:void product ()
	{
		c = a*b;
		cout<<"multiplication of a and b is:"<<c;
	}
};
int main()
{
	mul m;
	cout<<"enter value of a and b";
	cin>>m.a;
	cin>>m.b;
	m.product();
	}


*HIERACRCHICAL INHERATIANCE:

//hierarchical inheritance
#include<iostream>
using namespace std;
class demo{
	public: int a;
};
class square:public demo{
	public :void squqre()
	{
		int c=a*a;
		cout<<"square of a number"<<a<<"is"<<c;
	}
};
class cube:public demo
{
	public:
		void CUBE(){
			int d= a*a*a;
			cout<<"cube of a number"<<a<<"is:" <<d;
		}
};
int main()
{	
square s;
cube b;
cout<<"enter the value of square";
s.squqre();
cout<<"enter the value of cube";
cin>>b.a;
b.CUBE();
}
